local data = require('main.data')

-- set the properties that will be passed from square_spawner.script
go.property('speed', 0)
go.property('end_position', vmath.vector3())
go.property('is_point', false)

local function move(self)
	-- calculate the duration
	local duration = data.duration(self.speed, go.get_position(), self.end_position)
	-- set a random spin direction
	local spin_direction = (math.random(1,2) == 1) and 360 or -360
	-- rotate the square
	go.animate('.', 'euler.z', go.PLAYBACK_LOOP_FORWARD, go.get('.', 'euler.z') + spin_direction, go.EASING_LINEAR, duration / 0.5)
	-- move the square to the end position
	go.animate('.', 'position', go.PLAYBACK_ONCE_FORWARD, self.end_position, go.EASING_LINEAR, duration, 0, function()
		-- once the square has reached the end position, message square_spawner.script to remove bit
		msg.post('squares', 'remove', {id = go.get_id()})
	end)
end

function init(self)
	-- set the color of the square depending on whether it's a point or an enemy square
	if self.is_point then
		sprite.set_constant('#sprite', 'tint', data.color_one)
	else
		sprite.set_constant('#sprite', 'tint', data.color_two)
	end
	-- run the move function
	move(self)
end

function on_message(self, message_id, message, sender)
	-- check for the trigger response message (collision between two objects)
	if message_id == hash('trigger_response') and message.enter then
		-- check that the group of the other collision object is the circle and it hasn't already collided
		if message.other_group == hash('circle') and not self.collided then
			-- set collided to true so it can't run again 
			self.collided = true
			-- disable the square's collision object
			msg.post('#collisionobject', 'disable')
			-- check if the square is a point or an enemy square
			if self.is_point then
				-- scale the square to 0
				go.animate('.', 'scale', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.1, 0, function()
					-- message square_spawner.script to remove the square
					msg.post('squares', 'remove', {id = go.get_id()})
				end)
				-- send messages to increase the score and the speed of the game
				msg.post('score', 'increase_score')
				msg.post('squares', 'increase_speed')
				msg.post('circle', 'increase_speed')	
			else
				-- if the square was an enemy square, message the circle to end the game
				msg.post('circle', 'end_game')
				-- message square_spawner.script to stop
				msg.post('squares', 'stop')
			end
			
		end
	end
	
end
